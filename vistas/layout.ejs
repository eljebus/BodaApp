<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="screen-orientation" content="portrait">
    <link rel="icon" href="/img/luna.png">
    <title>Fatima & Jesús</title>
    
    <!-- Manifiesto para PWA -->
    <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">
    
    <!-- Iconos para la aplicación -->
    <link rel="icon" href="/img/icon-192x192.png" sizes="192x192">
    <link rel="apple-touch-icon" href="/img/icon-192x192.png">
    
    <!-- Meta para PWA -->
    <meta name="theme-color" content="#3967AF">
    <meta name="description" content="Aplicación para la boda de Fátima y Jesús">
    
    <!-- Habilitar modo web app en iOS -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Boda FyJ">
    
    <!-- CSS -->
    <link href="/css/materialize.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/js/materialize.js"></script>
</head>
<body>
    <div class="landscape-message">
        <center>
            <h4>Por favor gira tu teléfono</h4><br>
            <img src="/img/girar.png" alt="">
        </center>
    </div>
    
    <main>
        <%- include(content) %>
    </main>

    <!-- Modal Structure -->
    <div id="pushNotificationModal" class="modal">
        <div class="modal-content" id="contentPush">
            <h5>Activa las notificaciones push para no perderte ninguna actualización importante de nuestra boda.</h5>
        </div>
        <div class="modal-footer">
            <a href="#!" id="enablePush" class="modal-close waves-effect waves-green btn-flat">Aceptar</a>
            <a href="#!" id="cancelPush" class="modal-close waves-effect waves-red btn-flat">Cancelar</a>
        </div>
    </div>

    <script>
        // Variable global para el modal
        let pushNotificationModal;

        // Inicializar todos los modales
        document.addEventListener('DOMContentLoaded', function() {
            var modals = document.querySelectorAll('.modal');
            M.Modal.init(modals, {
                dismissible: true,
                opacity: 0.5,
                inDuration: 300,
                outDuration: 200,
                startingTop: '4%',
                endingTop: '10%'
            });

            // Guardar referencia al modal de notificaciones
            pushNotificationModal = M.Modal.getInstance(document.getElementById('pushNotificationModal'));

            // Asignar eventos a los botones
            const enablePushButton = document.getElementById('enablePush');
            const cancelPushButton = document.getElementById('cancelPush');

            if (enablePushButton) {
                enablePushButton.addEventListener('click', requestPushPermission);
            }

            if (cancelPushButton) {
                cancelPushButton.addEventListener('click', () => {
                    // Guardar en localStorage que el usuario canceló
                    localStorage.setItem('pushNotificationDeclined', 'true');
                });
            }
        });

        // Registrar el Service Worker y manejar la PWA
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                // Verificar si el usuario ya declinó las notificaciones
                if (localStorage.getItem('pushNotificationDeclined') === 'true') {
                    console.log('Usuario ya declinó las notificaciones');
                    return;
                }

                navigator.serviceWorker.register('/service-worker.js', {
                    scope: '/'
                })
                .then(registration => {
                    console.log('ServiceWorker registrado con éxito:', registration);
                    window.swRegistration = registration;
                    
                    // Verificar si la PWA es instalable
                    if (window.matchMedia('(display-mode: standalone)').matches) {
                        console.log('La app ya está instalada');
                    } else {
                        // Verificar si el navegador soporta la instalación
                        if ('getInstalledRelatedApps' in window.navigator) {
                            window.navigator.getInstalledRelatedApps().then((relatedApps) => {
                                if (relatedApps.length === 0) {
                                    console.log('La app es instalable');
                                }
                            });
                        }
                    }

                    // Verificar si ya está suscrito a notificaciones
                    return registration.pushManager.getSubscription();
                })
                .then(subscription => {
                    if (!subscription) {
                        // Solo mostrar el modal si NO está suscrito y NO ha declinado
                        if (localStorage.getItem('pushNotificationDeclined') !== 'true') {
                            setTimeout(() => {
                                if (pushNotificationModal) {
                                    pushNotificationModal.open();
                                } else {
                                    console.error('Modal no inicializado');
                                }
                            }, 1000);
                        }
                    } else {
                        console.log('Usuario ya suscrito, no mostrar modal');
                    }
                })
                .catch(error => {
                    console.log('Error al registrar el ServiceWorker:', error);
                });
            });
        }

        // Función para solicitar permiso de notificaciones
        async function requestPushPermission() {
            try {
                if (!window.swRegistration) {
                    console.error('Service Worker no registrado');
                    return;
                }

                const permission = await Notification.requestPermission();
                if (permission !== 'granted') {
                    console.log('Permiso denegado');
                    // Guardar en localStorage que el usuario denegó el permiso
                    localStorage.setItem('pushNotificationDeclined', 'true');
                    return;
                }

                const subscription = await window.swRegistration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array("BC-d2euHb147bF7av1kpDwH84fswmN0_8zjODcQptU63P5q-FNVWa9Tuc_2GBofCc1SgDdbS8c_aHdDXiWfCYyo")
                });

                console.log('Suscripción exitosa');
                await sendSubscriptionToBackend(subscription);
                
                // Cerrar modal después de suscribirse
                if (pushNotificationModal) {
                    pushNotificationModal.close();
                }

            } catch (error) {
                console.error('Error al solicitar permiso:', error);
                // Guardar en localStorage que hubo un error
                localStorage.setItem('pushNotificationDeclined', 'true');
            }
        }

        // Helper y función para enviar al backend
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
            const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
            const rawData = window.atob(base64);
            return Uint8Array.from([...rawData].map(char => char.charCodeAt(0)));
        }

        async function sendSubscriptionToBackend(subscription) {
            try {
                const response = await fetch('/save-subscription', {
                    method: 'POST',
                    body: JSON.stringify(subscription),
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    throw new Error('Error al guardar la suscripción');
                }
                console.log('Suscripción guardada en el backend');
            } catch (error) {
                console.error('Error al enviar suscripción:', error);
            }
        }
    </script>
    
    <script src="/js/fecha.js"></script>
    <script src="/js/instalar.js"></script>
</body>
</html>